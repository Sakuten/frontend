// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`containers LoginView render 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Provider
    event={
      Event {
        "application": ApplicationObject {
          "onAddGroupMember": [Function],
          "onChangeClassroom": [Function],
          "onChangeLottery": [Function],
          "onRemoveGroupMember": [Function],
          "onUpdate": [Function],
          "store": Store {
            "application": ApplicationObject {},
            "checker": CheckerObject {},
            "credential": CredentialObject {
              "kind": "",
              "recaptchaResponse": "",
              "secretId": "",
              "status": Object {},
              "token": "",
              Symbol(mobx did run lazy initializers): true,
              Symbol(mobx administration): ObservableObjectAdministration$$1 {
                "defaultEnhancer": [Function],
                "keysAtom": Atom$$1 {
                  "diffValue": 0,
                  "isBeingObserved": false,
                  "isPendingUnobservation": false,
                  "lastAccessedBy": 0,
                  "lowestObserverState": 2,
                  "name": "CredentialObject@3.keys",
                  "observers": Set {},
                },
                "name": "CredentialObject@3",
                "target": [Circular],
                "values": Map {
                  "secretId" => "",
                  "recaptchaResponse" => "",
                  "token" => "",
                  "kind" => "",
                  "status" => Map {},
                  "isUsedByStaff" => false,
                  "isLoggedIn" => false,
                  "isAbleToAuthenicate" => false,
                  "isLoggedInAsChecker" => false,
                },
              },
            },
            "dialog": DialogObject {},
            "error": ErrorObject {},
            "fetchStatus": [Function],
            "router": RouterStore {
              "go": [Function],
              "goBack": [Function],
              "goForward": [Function],
              "history": null,
              "push": [Function],
              "replace": [Function],
            },
          },
        },
        "checker": CheckerObject {
          "lastScan": "",
          "onChangeClassroom": [Function],
          "onQRScan": [Function],
          "store": Store {
            "application": ApplicationObject {},
            "checker": CheckerObject {},
            "credential": CredentialObject {
              "kind": "",
              "recaptchaResponse": "",
              "secretId": "",
              "status": Object {},
              "token": "",
              Symbol(mobx did run lazy initializers): true,
              Symbol(mobx administration): ObservableObjectAdministration$$1 {
                "defaultEnhancer": [Function],
                "keysAtom": Atom$$1 {
                  "diffValue": 0,
                  "isBeingObserved": false,
                  "isPendingUnobservation": false,
                  "lastAccessedBy": 0,
                  "lowestObserverState": 2,
                  "name": "CredentialObject@3.keys",
                  "observers": Set {},
                },
                "name": "CredentialObject@3",
                "target": [Circular],
                "values": Map {
                  "secretId" => "",
                  "recaptchaResponse" => "",
                  "token" => "",
                  "kind" => "",
                  "status" => Map {},
                  "isUsedByStaff" => false,
                  "isLoggedIn" => false,
                  "isAbleToAuthenicate" => false,
                  "isLoggedInAsChecker" => false,
                },
              },
            },
            "dialog": DialogObject {},
            "error": ErrorObject {},
            "fetchStatus": [Function],
            "router": RouterStore {
              "go": [Function],
              "goBack": [Function],
              "goForward": [Function],
              "history": null,
              "push": [Function],
              "replace": [Function],
            },
          },
        },
        "credential": CredentialObject {
          "onChangeRecaptchaResponse": [Function],
          "onLogin": [Function],
          "onLogout": [Function],
          "onQRError": [Function],
          "onQRScan": [Function],
          "store": Store {
            "application": ApplicationObject {},
            "checker": CheckerObject {},
            "credential": CredentialObject {
              "kind": "",
              "recaptchaResponse": "",
              "secretId": "",
              "status": Object {},
              "token": "",
              Symbol(mobx did run lazy initializers): true,
              Symbol(mobx administration): ObservableObjectAdministration$$1 {
                "defaultEnhancer": [Function],
                "keysAtom": Atom$$1 {
                  "diffValue": 0,
                  "isBeingObserved": false,
                  "isPendingUnobservation": false,
                  "lastAccessedBy": 0,
                  "lowestObserverState": 2,
                  "name": "CredentialObject@3.keys",
                  "observers": Set {},
                },
                "name": "CredentialObject@3",
                "target": [Circular],
                "values": Map {
                  "secretId" => "",
                  "recaptchaResponse" => "",
                  "token" => "",
                  "kind" => "",
                  "status" => Map {},
                  "isUsedByStaff" => false,
                  "isLoggedIn" => false,
                  "isAbleToAuthenicate" => false,
                  "isLoggedInAsChecker" => false,
                },
              },
            },
            "dialog": DialogObject {},
            "error": ErrorObject {},
            "fetchStatus": [Function],
            "router": RouterStore {
              "go": [Function],
              "goBack": [Function],
              "goForward": [Function],
              "history": null,
              "push": [Function],
              "replace": [Function],
            },
          },
        },
        "dialog": DialogObject {
          "onClose": [Function],
          "onOpen": [Function],
          "store": Store {
            "application": ApplicationObject {},
            "checker": CheckerObject {},
            "credential": CredentialObject {
              "kind": "",
              "recaptchaResponse": "",
              "secretId": "",
              "status": Object {},
              "token": "",
              Symbol(mobx did run lazy initializers): true,
              Symbol(mobx administration): ObservableObjectAdministration$$1 {
                "defaultEnhancer": [Function],
                "keysAtom": Atom$$1 {
                  "diffValue": 0,
                  "isBeingObserved": false,
                  "isPendingUnobservation": false,
                  "lastAccessedBy": 0,
                  "lowestObserverState": 2,
                  "name": "CredentialObject@3.keys",
                  "observers": Set {},
                },
                "name": "CredentialObject@3",
                "target": [Circular],
                "values": Map {
                  "secretId" => "",
                  "recaptchaResponse" => "",
                  "token" => "",
                  "kind" => "",
                  "status" => Map {},
                  "isUsedByStaff" => false,
                  "isLoggedIn" => false,
                  "isAbleToAuthenicate" => false,
                  "isLoggedInAsChecker" => false,
                },
              },
            },
            "dialog": DialogObject {},
            "error": ErrorObject {},
            "fetchStatus": [Function],
            "router": RouterStore {
              "go": [Function],
              "goBack": [Function],
              "goForward": [Function],
              "history": null,
              "push": [Function],
              "replace": [Function],
            },
          },
        },
        "error": ErrorObject {
          "onDelete": [Function],
          "onError": [Function],
          "store": Store {
            "application": ApplicationObject {},
            "checker": CheckerObject {},
            "credential": CredentialObject {
              "kind": "",
              "recaptchaResponse": "",
              "secretId": "",
              "status": Object {},
              "token": "",
              Symbol(mobx did run lazy initializers): true,
              Symbol(mobx administration): ObservableObjectAdministration$$1 {
                "defaultEnhancer": [Function],
                "keysAtom": Atom$$1 {
                  "diffValue": 0,
                  "isBeingObserved": false,
                  "isPendingUnobservation": false,
                  "lastAccessedBy": 0,
                  "lowestObserverState": 2,
                  "name": "CredentialObject@3.keys",
                  "observers": Set {},
                },
                "name": "CredentialObject@3",
                "target": [Circular],
                "values": Map {
                  "secretId" => "",
                  "recaptchaResponse" => "",
                  "token" => "",
                  "kind" => "",
                  "status" => Map {},
                  "isUsedByStaff" => false,
                  "isLoggedIn" => false,
                  "isAbleToAuthenicate" => false,
                  "isLoggedInAsChecker" => false,
                },
              },
            },
            "dialog": DialogObject {},
            "error": ErrorObject {},
            "fetchStatus": [Function],
            "router": RouterStore {
              "go": [Function],
              "goBack": [Function],
              "goForward": [Function],
              "history": null,
              "push": [Function],
              "replace": [Function],
            },
          },
        },
        "onApplyLottery": [Function],
        "onCancelApplication": [Function],
        "store": Store {
          "application": ApplicationObject {},
          "checker": CheckerObject {},
          "credential": CredentialObject {
            "kind": "",
            "recaptchaResponse": "",
            "secretId": "",
            "status": Object {},
            "token": "",
            Symbol(mobx did run lazy initializers): true,
            Symbol(mobx administration): ObservableObjectAdministration$$1 {
              "defaultEnhancer": [Function],
              "keysAtom": Atom$$1 {
                "diffValue": 0,
                "isBeingObserved": false,
                "isPendingUnobservation": false,
                "lastAccessedBy": 0,
                "lowestObserverState": 2,
                "name": "CredentialObject@3.keys",
                "observers": Set {},
              },
              "name": "CredentialObject@3",
              "target": [Circular],
              "values": Map {
                "secretId" => "",
                "recaptchaResponse" => "",
                "token" => "",
                "kind" => "",
                "status" => Map {},
                "isUsedByStaff" => false,
                "isLoggedIn" => false,
                "isAbleToAuthenicate" => false,
                "isLoggedInAsChecker" => false,
              },
            },
          },
          "dialog": DialogObject {},
          "error": ErrorObject {},
          "fetchStatus": [Function],
          "router": RouterStore {
            "go": [Function],
            "goBack": [Function],
            "goForward": [Function],
            "history": null,
            "push": [Function],
            "replace": [Function],
          },
        },
      }
    }
  >
    <inject-LoginView-with-event
      credential={
        CredentialObject {
          "kind": "",
          "recaptchaResponse": "",
          "secretId": "",
          "status": Object {},
          "token": "",
          Symbol(mobx did run lazy initializers): true,
          Symbol(mobx administration): ObservableObjectAdministration$$1 {
            "defaultEnhancer": [Function],
            "keysAtom": Atom$$1 {
              "diffValue": 0,
              "isBeingObserved": false,
              "isPendingUnobservation": false,
              "lastAccessedBy": 0,
              "lowestObserverState": 2,
              "name": "CredentialObject@3.keys",
              "observers": Set {},
            },
            "name": "CredentialObject@3",
            "target": [Circular],
            "values": Map {
              "secretId" => "",
              "recaptchaResponse" => "",
              "token" => "",
              "kind" => "",
              "status" => Map {},
              "isUsedByStaff" => false,
              "isLoggedIn" => false,
              "isAbleToAuthenicate" => false,
              "isLoggedInAsChecker" => false,
            },
          },
        }
      }
    />
  </Provider>,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "class",
    "props": Object {
      "credential": CredentialObject {
        "kind": "",
        "recaptchaResponse": "",
        "secretId": "",
        "status": Object {},
        "token": "",
        Symbol(mobx did run lazy initializers): true,
        Symbol(mobx administration): ObservableObjectAdministration$$1 {
          "defaultEnhancer": [Function],
          "keysAtom": Atom$$1 {
            "diffValue": 0,
            "isBeingObserved": false,
            "isPendingUnobservation": false,
            "lastAccessedBy": 0,
            "lowestObserverState": 2,
            "name": "CredentialObject@3.keys",
            "observers": Set {},
          },
          "name": "CredentialObject@3",
          "target": [Circular],
          "values": Map {
            "secretId" => "",
            "recaptchaResponse" => "",
            "token" => "",
            "kind" => "",
            "status" => Map {},
            "isUsedByStaff" => false,
            "isLoggedIn" => false,
            "isAbleToAuthenicate" => false,
            "isLoggedInAsChecker" => false,
          },
        },
      },
    },
    "ref": null,
    "rendered": null,
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "credential": CredentialObject {
          "kind": "",
          "recaptchaResponse": "",
          "secretId": "",
          "status": Object {},
          "token": "",
          Symbol(mobx did run lazy initializers): true,
          Symbol(mobx administration): ObservableObjectAdministration$$1 {
            "defaultEnhancer": [Function],
            "keysAtom": Atom$$1 {
              "diffValue": 0,
              "isBeingObserved": false,
              "isPendingUnobservation": false,
              "lastAccessedBy": 0,
              "lowestObserverState": 2,
              "name": "CredentialObject@3.keys",
              "observers": Set {},
            },
            "name": "CredentialObject@3",
            "target": [Circular],
            "values": Map {
              "secretId" => "",
              "recaptchaResponse" => "",
              "token" => "",
              "kind" => "",
              "status" => Map {},
              "isUsedByStaff" => false,
              "isLoggedIn" => false,
              "isAbleToAuthenicate" => false,
              "isLoggedInAsChecker" => false,
            },
          },
        },
      },
      "ref": null,
      "rendered": null,
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
    "attachTo": undefined,
    "hydrateIn": undefined,
  },
}
`;
