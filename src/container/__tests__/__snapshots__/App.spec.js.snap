// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`containers App render 1`] = `
ShallowWrapper {
  "length": 1,
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Provider
    event={
      Event {
        "application": ApplicationObject {
          "onApply": [Function],
          "onCancel": [Function],
          "onChangeClassroom": [Function],
          "onChangeLottery": [Function],
          "onUpdate": [Function],
          "store": Store {
            "application": ApplicationObject {},
            "credential": CredentialObject {
              "recaptchaResponse": "",
              "status": Object {},
              "token": "",
              "username": "",
              Symbol(mobx did run lazy initializers): true,
              Symbol(mobx administration): ObservableObjectAdministration$$1 {
                "defaultEnhancer": [Function],
                "keysAtom": Atom$$1 {
                  "diffValue": 0,
                  "isBeingObserved": false,
                  "isPendingUnobservation": false,
                  "lastAccessedBy": 0,
                  "lowestObserverState": 2,
                  "name": "CredentialObject@3.keys",
                  "observers": Set {},
                },
                "name": "CredentialObject@3",
                "target": [Circular],
                "values": Map {
                  "username" => "",
                  "recaptchaResponse" => "",
                  "token" => "",
                  "status" => Map {},
                  "isLoggedIn" => false,
                },
              },
            },
            "error": ErrorObject {},
            "fetchStatus": [Function],
            "router": RouterStore {
              "go": [Function],
              "goBack": [Function],
              "goForward": [Function],
              "history": null,
              "push": [Function],
              "replace": [Function],
            },
          },
        },
        "credential": CredentialObject {
          "onChangeRecaptchaResponse": [Function],
          "onChangeUsername": [Function],
          "onLogin": [Function],
          "onLogout": [Function],
          "store": Store {
            "application": ApplicationObject {},
            "credential": CredentialObject {
              "recaptchaResponse": "",
              "status": Object {},
              "token": "",
              "username": "",
              Symbol(mobx did run lazy initializers): true,
              Symbol(mobx administration): ObservableObjectAdministration$$1 {
                "defaultEnhancer": [Function],
                "keysAtom": Atom$$1 {
                  "diffValue": 0,
                  "isBeingObserved": false,
                  "isPendingUnobservation": false,
                  "lastAccessedBy": 0,
                  "lowestObserverState": 2,
                  "name": "CredentialObject@3.keys",
                  "observers": Set {},
                },
                "name": "CredentialObject@3",
                "target": [Circular],
                "values": Map {
                  "username" => "",
                  "recaptchaResponse" => "",
                  "token" => "",
                  "status" => Map {},
                  "isLoggedIn" => false,
                },
              },
            },
            "error": ErrorObject {},
            "fetchStatus": [Function],
            "router": RouterStore {
              "go": [Function],
              "goBack": [Function],
              "goForward": [Function],
              "history": null,
              "push": [Function],
              "replace": [Function],
            },
          },
        },
        "error": ErrorObject {
          "onError": [Function],
          "store": Store {
            "application": ApplicationObject {},
            "credential": CredentialObject {
              "recaptchaResponse": "",
              "status": Object {},
              "token": "",
              "username": "",
              Symbol(mobx did run lazy initializers): true,
              Symbol(mobx administration): ObservableObjectAdministration$$1 {
                "defaultEnhancer": [Function],
                "keysAtom": Atom$$1 {
                  "diffValue": 0,
                  "isBeingObserved": false,
                  "isPendingUnobservation": false,
                  "lastAccessedBy": 0,
                  "lowestObserverState": 2,
                  "name": "CredentialObject@3.keys",
                  "observers": Set {},
                },
                "name": "CredentialObject@3",
                "target": [Circular],
                "values": Map {
                  "username" => "",
                  "recaptchaResponse" => "",
                  "token" => "",
                  "status" => Map {},
                  "isLoggedIn" => false,
                },
              },
            },
            "error": ErrorObject {},
            "fetchStatus": [Function],
            "router": RouterStore {
              "go": [Function],
              "goBack": [Function],
              "goForward": [Function],
              "history": null,
              "push": [Function],
              "replace": [Function],
            },
          },
        },
        "store": Store {
          "application": ApplicationObject {},
          "credential": CredentialObject {
            "recaptchaResponse": "",
            "status": Object {},
            "token": "",
            "username": "",
            Symbol(mobx did run lazy initializers): true,
            Symbol(mobx administration): ObservableObjectAdministration$$1 {
              "defaultEnhancer": [Function],
              "keysAtom": Atom$$1 {
                "diffValue": 0,
                "isBeingObserved": false,
                "isPendingUnobservation": false,
                "lastAccessedBy": 0,
                "lowestObserverState": 2,
                "name": "CredentialObject@3.keys",
                "observers": Set {},
              },
              "name": "CredentialObject@3",
              "target": [Circular],
              "values": Map {
                "username" => "",
                "recaptchaResponse" => "",
                "token" => "",
                "status" => Map {},
                "isLoggedIn" => false,
              },
            },
          },
          "error": ErrorObject {},
          "fetchStatus": [Function],
          "router": RouterStore {
            "go": [Function],
            "goBack": [Function],
            "goForward": [Function],
            "history": null,
            "push": [Function],
            "replace": [Function],
          },
        },
      }
    }
  >
    <MemoryRouter
      initialEntries={
        Array [
          "/",
        ]
      }
    >
      <inject-App-with-event
        store={
          Store {
            "application": ApplicationObject {},
            "credential": CredentialObject {
              "recaptchaResponse": "",
              "status": Object {},
              "token": "",
              "username": "",
              Symbol(mobx did run lazy initializers): true,
              Symbol(mobx administration): ObservableObjectAdministration$$1 {
                "defaultEnhancer": [Function],
                "keysAtom": Atom$$1 {
                  "diffValue": 0,
                  "isBeingObserved": false,
                  "isPendingUnobservation": false,
                  "lastAccessedBy": 0,
                  "lowestObserverState": 2,
                  "name": "CredentialObject@3.keys",
                  "observers": Set {},
                },
                "name": "CredentialObject@3",
                "target": [Circular],
                "values": Map {
                  "username" => "",
                  "recaptchaResponse" => "",
                  "token" => "",
                  "status" => Map {},
                  "isLoggedIn" => false,
                },
              },
            },
            "error": ErrorObject {},
            "fetchStatus": [Function],
            "router": RouterStore {
              "go": [Function],
              "goBack": [Function],
              "goForward": [Function],
              "history": null,
              "push": [Function],
              "replace": [Function],
            },
          }
        }
      />
    </MemoryRouter>
  </Provider>,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "class",
    "props": Object {
      "children": <inject-App-with-event
        store={
          Store {
            "application": ApplicationObject {},
            "credential": CredentialObject {
              "recaptchaResponse": "",
              "status": Object {},
              "token": "",
              "username": "",
              Symbol(mobx did run lazy initializers): true,
              Symbol(mobx administration): ObservableObjectAdministration$$1 {
                "defaultEnhancer": [Function],
                "keysAtom": Atom$$1 {
                  "diffValue": 0,
                  "isBeingObserved": false,
                  "isPendingUnobservation": false,
                  "lastAccessedBy": 0,
                  "lowestObserverState": 2,
                  "name": "CredentialObject@3.keys",
                  "observers": Set {},
                },
                "name": "CredentialObject@3",
                "target": [Circular],
                "values": Map {
                  "username" => "",
                  "recaptchaResponse" => "",
                  "token" => "",
                  "status" => Map {},
                  "isLoggedIn" => false,
                },
              },
            },
            "error": ErrorObject {},
            "fetchStatus": [Function],
            "router": RouterStore {
              "go": [Function],
              "goBack": [Function],
              "goForward": [Function],
              "history": null,
              "push": [Function],
              "replace": [Function],
            },
          }
        }
      />,
      "initialEntries": Array [
        "/",
      ],
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "store": Store {
          "application": ApplicationObject {},
          "credential": CredentialObject {
            "recaptchaResponse": "",
            "status": Object {},
            "token": "",
            "username": "",
            Symbol(mobx did run lazy initializers): true,
            Symbol(mobx administration): ObservableObjectAdministration$$1 {
              "defaultEnhancer": [Function],
              "keysAtom": Atom$$1 {
                "diffValue": 0,
                "isBeingObserved": false,
                "isPendingUnobservation": false,
                "lastAccessedBy": 0,
                "lowestObserverState": 2,
                "name": "CredentialObject@3.keys",
                "observers": Set {},
              },
              "name": "CredentialObject@3",
              "target": [Circular],
              "values": Map {
                "username" => "",
                "recaptchaResponse" => "",
                "token" => "",
                "status" => Map {},
                "isLoggedIn" => false,
              },
            },
          },
          "error": ErrorObject {},
          "fetchStatus": [Function],
          "router": RouterStore {
            "go": [Function],
            "goBack": [Function],
            "goForward": [Function],
            "history": null,
            "push": [Function],
            "replace": [Function],
          },
        },
      },
      "ref": null,
      "rendered": null,
      "type": [Function],
    },
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "children": <inject-App-with-event
          store={
            Store {
              "application": ApplicationObject {},
              "credential": CredentialObject {
                "recaptchaResponse": "",
                "status": Object {},
                "token": "",
                "username": "",
                Symbol(mobx did run lazy initializers): true,
                Symbol(mobx administration): ObservableObjectAdministration$$1 {
                  "defaultEnhancer": [Function],
                  "keysAtom": Atom$$1 {
                    "diffValue": 0,
                    "isBeingObserved": false,
                    "isPendingUnobservation": false,
                    "lastAccessedBy": 0,
                    "lowestObserverState": 2,
                    "name": "CredentialObject@3.keys",
                    "observers": Set {},
                  },
                  "name": "CredentialObject@3",
                  "target": [Circular],
                  "values": Map {
                    "username" => "",
                    "recaptchaResponse" => "",
                    "token" => "",
                    "status" => Map {},
                    "isLoggedIn" => false,
                  },
                },
              },
              "error": ErrorObject {},
              "fetchStatus": [Function],
              "router": RouterStore {
                "go": [Function],
                "goBack": [Function],
                "goForward": [Function],
                "history": null,
                "push": [Function],
                "replace": [Function],
              },
            }
          }
        />,
        "initialEntries": Array [
          "/",
        ],
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "store": Store {
            "application": ApplicationObject {},
            "credential": CredentialObject {
              "recaptchaResponse": "",
              "status": Object {},
              "token": "",
              "username": "",
              Symbol(mobx did run lazy initializers): true,
              Symbol(mobx administration): ObservableObjectAdministration$$1 {
                "defaultEnhancer": [Function],
                "keysAtom": Atom$$1 {
                  "diffValue": 0,
                  "isBeingObserved": false,
                  "isPendingUnobservation": false,
                  "lastAccessedBy": 0,
                  "lowestObserverState": 2,
                  "name": "CredentialObject@3.keys",
                  "observers": Set {},
                },
                "name": "CredentialObject@3",
                "target": [Circular],
                "values": Map {
                  "username" => "",
                  "recaptchaResponse" => "",
                  "token" => "",
                  "status" => Map {},
                  "isLoggedIn" => false,
                },
              },
            },
            "error": ErrorObject {},
            "fetchStatus": [Function],
            "router": RouterStore {
              "go": [Function],
              "goBack": [Function],
              "goForward": [Function],
              "history": null,
              "push": [Function],
              "replace": [Function],
            },
          },
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
      },
    },
  },
}
`;
